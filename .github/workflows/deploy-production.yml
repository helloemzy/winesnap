name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      staging_validated:
        description: 'Have you validated the staging environment?'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      create_backup:
        description: 'Create backup before deployment?'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '18'
  STAGING_BRANCH: 'staging/gamified-winesnap'
  PRODUCTION_BRANCH: 'main'

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    name: 🔍 Pre-deployment Checks
    steps:
      - name: ❌ Check staging validation
        if: github.event.inputs.staging_validated != 'true'
        run: |
          echo "❌ Staging environment must be validated before production deployment"
          echo "Please thoroughly test the staging environment first"
          exit 1
          
      - name: 📚 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔍 Validate staging branch
        run: |
          if ! git branch -r | grep -q "origin/${{ env.STAGING_BRANCH }}"; then
            echo "❌ Staging branch not found"
            exit 1
          fi
          echo "✅ Staging branch validated"
          
      - name: 🔍 Check deployment readiness
        run: |
          echo "✅ All pre-deployment checks passed"

  create-backup:
    runs-on: ubuntu-latest
    name: 📦 Create Backup
    needs: pre-deployment-checks
    if: github.event.inputs.create_backup == 'true'
    steps:
      - name: 📚 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📦 Create backup branch
        run: |
          BACKUP_BRANCH="backup/pre-gamified-$(date +%Y%m%d_%H%M%S)"
          echo "Creating backup branch: $BACKUP_BRANCH"
          
          git checkout ${{ env.PRODUCTION_BRANCH }}
          git checkout -b $BACKUP_BRANCH
          git push origin $BACKUP_BRANCH
          
          echo "backup_branch=$BACKUP_BRANCH" >> $GITHUB_OUTPUT
          echo "✅ Backup created: $BACKUP_BRANCH"
        id: backup

  merge-and-test:
    runs-on: ubuntu-latest
    name: 🔄 Merge and Test
    needs: [pre-deployment-checks, create-backup]
    if: always() && needs.pre-deployment-checks.result == 'success'
    steps:
      - name: 📚 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔄 Merge staging to main
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          git checkout ${{ env.PRODUCTION_BRANCH }}
          git pull origin ${{ env.PRODUCTION_BRANCH }}
          
          git merge origin/${{ env.STAGING_BRANCH }} --no-ff -m "feat: Deploy gamified WineSnap to production

          - Complete redesign with Pokédex collections and Tamagotchi pets
          - New database schema with gaming tables  
          - Enhanced voice/camera capture with gaming integration
          - Social features and viral growth mechanics
          - Maintained backward compatibility with existing data

          🚀 Deployed from validated staging environment

          🤖 Generated with Claude Code"
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build for production
        run: npm run build
        env:
          NEXT_PUBLIC_APP_ENV: production
          NEXT_PUBLIC_ENABLE_GAMING_FEATURES: true
          NEXT_PUBLIC_ENABLE_PET_SYSTEM: true
          NEXT_PUBLIC_ENABLE_VIRAL_FEATURES: true
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          
      - name: 🧪 Run final tests
        run: npm run lint
        continue-on-error: true
        
      - name: 📤 Push merged changes
        run: |
          git push origin ${{ env.PRODUCTION_BRANCH }}

  deploy-production:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Production
    needs: merge-and-test
    environment:
      name: production
      url: https://winesnap-oleov0698-helloemilywho-gmailcoms-projects.vercel.app
    steps:
      - name: 📚 Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PRODUCTION_BRANCH }}
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 📄 Install Vercel CLI
        run: npm install --global vercel@latest
        
      - name: 🔄 Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: 🏗️ Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: 🚀 Deploy to Production
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "🚀 Deployed to production: $url"

  verify-production:
    runs-on: ubuntu-latest
    name: 🔍 Verify Production
    needs: deploy-production
    steps:
      - name: ⏳ Wait for deployment
        run: |
          echo "Waiting for production deployment to stabilize..."
          sleep 60
          
      - name: 🏥 Health check
        run: |
          PRODUCTION_URL="https://winesnap-oleov0698-helloemilywho-gmailcoms-projects.vercel.app"
          
          echo "Testing production URL: $PRODUCTION_URL"
          
          # Check if site responds
          if curl -f -s "$PRODUCTION_URL" > /dev/null; then
            echo "✅ Production site is responding"
          else
            echo "❌ Production site not responding"
            exit 1
          fi
          
      - name: 📊 Create deployment report
        run: |
          echo "## 🚀 Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "**Production URL:** https://winesnap-oleov0698-helloemilywho-gmailcoms-projects.vercel.app" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ env.PRODUCTION_BRANCH }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** production" >> $GITHUB_STEP_SUMMARY
          echo "**Gaming Features:** ✅ Enabled" >> $GITHUB_STEP_SUMMARY
          echo "**Pet System:** ✅ Enabled" >> $GITHUB_STEP_SUMMARY
          echo "**Viral Features:** ✅ Enabled" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY

  cleanup:
    runs-on: ubuntu-latest
    name: 🧹 Cleanup
    needs: [verify-production]
    if: success()
    steps:
      - name: 📚 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🧹 Clean up old backups
        run: |
          echo "Cleaning up old backup branches..."
          
          # Keep only the 5 most recent backup branches
          git branch -r | grep "origin/backup/pre-gamified-" | sort -r | tail -n +6 | while read branch; do
            branch_name=$(echo $branch | sed 's/origin\///')
            echo "Deleting old backup: $branch_name"
            git push origin --delete "$branch_name" 2>/dev/null || true
          done
          
          echo "✅ Cleanup completed"

  rollback:
    runs-on: ubuntu-latest
    name: 🔄 Rollback (if needed)
    needs: [verify-production]
    if: failure()
    steps:
      - name: ❌ Production deployment failed
        run: |
          echo "❌ Production deployment failed"
          echo "Manual rollback may be required"
          echo "1. Check logs for specific errors"
          echo "2. Consider rolling back to backup branch"
          echo "3. Redeploy previous version if needed"
          
  notify-success:
    runs-on: ubuntu-latest
    name: 📢 Success Notification
    needs: [verify-production, cleanup]
    if: success()
    steps:
      - name: 🎉 Success notification
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "Gamified WineSnap is now live!"
          echo "Monitor the application and user feedback closely"