#!/bin/bash

# WineSnap Emergency Rollback Script
# This script provides safe rollback options for production deployments

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PRODUCTION_BRANCH="main"
PRODUCTION_URL="https://winesnap-oleov0698-helloemilywho-gmailcoms-projects.vercel.app"

echo -e "${RED}üö® WineSnap Emergency Rollback${NC}"
echo "=============================="

# Function to list available backups
list_backups() {
    echo -e "${YELLOW}üìã Available backup branches:${NC}"
    
    git branch -r | grep "origin/backup/" | sort -r | head -10 | while read branch; do
        branch_name=$(echo $branch | sed 's/origin\///')
        commit_date=$(git log -1 --format="%cd" --date=short $branch 2>/dev/null || echo "Unknown")
        echo "  - $branch_name (created: $commit_date)"
    done
    
    if [ $(git branch -r | grep -c "origin/backup/") -eq 0 ]; then
        echo -e "${RED}‚ùå No backup branches found${NC}"
        return 1
    fi
}

# Function to validate backup branch
validate_backup() {
    local backup_branch=$1
    
    echo -e "${YELLOW}üîç Validating backup branch: $backup_branch${NC}"
    
    # Check if branch exists
    if ! git rev-parse --verify "origin/$backup_branch" >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Backup branch not found: $backup_branch${NC}"
        return 1
    fi
    
    # Check if branch has commits
    local commit_count=$(git rev-list --count "origin/$backup_branch" 2>/dev/null || echo "0")
    if [ "$commit_count" -eq 0 ]; then
        echo -e "${RED}‚ùå Backup branch is empty: $backup_branch${NC}"
        return 1
    fi
    
    # Show backup info
    echo -e "${BLUE}Backup information:${NC}"
    echo "  Branch: $backup_branch"
    echo "  Commits: $commit_count"
    echo "  Last commit: $(git log -1 --format="%cd" --date=short origin/$backup_branch)"
    echo "  Author: $(git log -1 --format="%an" origin/$backup_branch)"
    
    return 0
}

# Function to perform git rollback
git_rollback() {
    local backup_branch=$1
    
    echo -e "${YELLOW}üîÑ Rolling back git to: $backup_branch${NC}"
    
    # Checkout main branch
    git checkout $PRODUCTION_BRANCH
    
    # Create rollback commit
    local rollback_commit_msg="ROLLBACK: Emergency rollback to $backup_branch

This is an emergency rollback to restore system stability.
Previous state has been preserved for investigation.

Rollback reason: Emergency deployment rollback
Rollback time: $(date)
Target backup: $backup_branch

üö® Generated by emergency rollback script"
    
    # Reset to backup state
    git reset --hard "origin/$backup_branch"
    
    # Force push (this is intentional for emergency rollback)
    git push origin $PRODUCTION_BRANCH --force
    
    echo -e "${GREEN}‚úÖ Git rollback completed${NC}"
}

# Function to rollback Vercel deployment
vercel_rollback() {
    echo -e "${YELLOW}üöÄ Rolling back Vercel deployment...${NC}"
    
    # Check if Vercel CLI is available
    if ! command -v vercel &> /dev/null; then
        echo -e "${RED}‚ùå Vercel CLI not found. Install with: npm i -g vercel${NC}"
        return 1
    fi
    
    # Deploy the rolled back version
    vercel --prod --token="${VERCEL_TOKEN:-}" || {
        echo -e "${RED}‚ùå Vercel rollback failed${NC}"
        echo -e "${YELLOW}Manual steps required:${NC}"
        echo "1. Login to Vercel dashboard"
        echo "2. Go to the WineSnap project"
        echo "3. Find a previous stable deployment"
        echo "4. Click 'Promote to Production'"
        return 1
    }
    
    echo -e "${GREEN}‚úÖ Vercel deployment rolled back${NC}"
}

# Function to verify rollback
verify_rollback() {
    echo -e "${YELLOW}üè• Verifying rollback...${NC}"
    
    # Wait for deployment to be ready
    echo "Waiting for deployment to stabilize..."
    sleep 30
    
    # Check if the site responds
    echo "Testing production URL: $PRODUCTION_URL"
    
    if curl -f -s "$PRODUCTION_URL" > /dev/null; then
        echo -e "${GREEN}‚úÖ Production site is responding${NC}"
    else
        echo -e "${RED}‚ùå Production site not responding${NC}"
        echo -e "${YELLOW}Additional steps may be required${NC}"
        return 1
    fi
    
    # Additional health checks
    echo -e "${GREEN}‚úÖ Rollback verification completed${NC}"
}

# Function to create rollback report
create_rollback_report() {
    local backup_branch=$1
    local rollback_reason=$2
    
    local report_file="rollback-report-$(date +%Y%m%d_%H%M%S).md"
    
    cat > "$report_file" << EOF
# WineSnap Emergency Rollback Report

**Rollback Date:** $(date)
**Target Backup:** $backup_branch
**Reason:** $rollback_reason
**Performed By:** $(git config user.name) ($(git config user.email))

## Rollback Summary

- **Git Repository:** Rolled back to $backup_branch
- **Vercel Deployment:** Redeployed from rolled back code
- **Production URL:** $PRODUCTION_URL
- **Status:** $(curl -f -s "$PRODUCTION_URL" > /dev/null && echo "‚úÖ Online" || echo "‚ùå Offline")

## Actions Taken

1. Validated backup branch: $backup_branch
2. Performed git rollback using force push
3. Redeployed to Vercel production
4. Verified site accessibility

## Next Steps

1. **Investigate Root Cause:** Review logs and identify what caused the need for rollback
2. **Fix Issues:** Address the problems that led to the rollback
3. **Test Thoroughly:** Ensure fixes work in staging before redeploying
4. **Plan Redeployment:** Create a plan to safely redeploy the fixed version
5. **Update Documentation:** Document lessons learned and improve procedures

## Important Notes

- This was an emergency rollback using force push
- Previous production state has been overwritten
- Database state may need separate attention
- Monitor system closely for any issues

## Contact Information

For questions about this rollback, contact the deployment team.
EOF

    echo -e "${BLUE}üìä Rollback report created: $report_file${NC}"
}

# Function to show rollback options
show_rollback_options() {
    echo -e "${BLUE}Available rollback options:${NC}"
    echo "1. List available backups"
    echo "2. Quick rollback to latest backup"
    echo "3. Rollback to specific backup"
    echo "4. Vercel-only rollback (no git changes)"
    echo "5. Cancel rollback"
    echo
}

# Function for interactive rollback
interactive_rollback() {
    while true; do
        show_rollback_options
        read -p "Choose rollback option (1-5): " choice
        
        case $choice in
            1)
                list_backups
                ;;
            2)
                quick_rollback
                break
                ;;
            3)
                custom_rollback
                break
                ;;
            4)
                vercel_only_rollback
                break
                ;;
            5)
                echo -e "${YELLOW}Rollback cancelled${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Invalid option${NC}"
                ;;
        esac
        echo
    done
}

# Function for quick rollback
quick_rollback() {
    echo -e "${YELLOW}üöÄ Quick rollback to latest backup...${NC}"
    
    local latest_backup=$(git branch -r | grep "origin/backup/" | sort -r | head -1 | sed 's/origin\///' | xargs)
    
    if [ -z "$latest_backup" ]; then
        echo -e "${RED}‚ùå No backup branches found${NC}"
        return 1
    fi
    
    echo -e "${BLUE}Latest backup: $latest_backup${NC}"
    
    if validate_backup "$latest_backup"; then
        confirm_rollback "$latest_backup" "Emergency rollback to latest backup"
    fi
}

# Function for custom rollback
custom_rollback() {
    list_backups
    echo
    read -p "Enter backup branch name (without 'origin/'): " backup_branch
    
    if validate_backup "$backup_branch"; then
        read -p "Enter rollback reason: " reason
        confirm_rollback "$backup_branch" "$reason"
    fi
}

# Function for Vercel-only rollback
vercel_only_rollback() {
    echo -e "${YELLOW}üöÄ Vercel-only rollback (no git changes)...${NC}"
    echo -e "${RED}‚ö†Ô∏è  This will only rollback the Vercel deployment, not git history${NC}"
    
    read -p "Continue with Vercel-only rollback? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        vercel_rollback
        verify_rollback
        echo -e "${GREEN}‚úÖ Vercel-only rollback completed${NC}"
    fi
}

# Function to confirm rollback
confirm_rollback() {
    local backup_branch=$1
    local reason=$2
    
    echo -e "${RED}‚ö†Ô∏è  CRITICAL: This will perform an emergency rollback${NC}"
    echo -e "${RED}‚ö†Ô∏è  This operation uses force push and cannot be undone easily${NC}"
    echo
    echo -e "Target backup: ${BLUE}$backup_branch${NC}"
    echo -e "Reason: ${BLUE}$reason${NC}"
    echo
    read -p "Proceed with emergency rollback? (type 'ROLLBACK' to confirm): " confirmation
    
    if [ "$confirmation" = "ROLLBACK" ]; then
        perform_full_rollback "$backup_branch" "$reason"
    else
        echo -e "${YELLOW}Rollback cancelled${NC}"
    fi
}

# Function to perform full rollback
perform_full_rollback() {
    local backup_branch=$1
    local reason=$2
    
    echo -e "${RED}üö® Performing emergency rollback...${NC}"
    
    git_rollback "$backup_branch"
    vercel_rollback
    verify_rollback
    create_rollback_report "$backup_branch" "$reason"
    
    echo -e "${GREEN}‚úÖ Emergency rollback completed successfully${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Please review the rollback report and plan next steps${NC}"
}

# Main script logic
main() {
    echo -e "${YELLOW}This is an emergency rollback script for WineSnap production${NC}"
    echo -e "${RED}Use only when production is broken and immediate rollback is needed${NC}"
    echo
    
    # Check prerequisites
    if [ ! -f "package.json" ]; then
        echo -e "${RED}‚ùå Not in project root directory${NC}"
        exit 1
    fi
    
    # Check git status
    if [ -n "$(git status --porcelain)" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Working directory has uncommitted changes${NC}"
        echo -e "${YELLOW}These will be lost during rollback${NC}"
    fi
    
    # Start interactive rollback process
    interactive_rollback
}

# Error handler
error_handler() {
    echo -e "${RED}‚ùå Rollback failed. Check the logs above for details.${NC}"
    echo -e "${YELLOW}Consider manual rollback steps:${NC}"
    echo "1. Check Vercel dashboard for previous deployments"
    echo "2. Manually promote a stable deployment"
    echo "3. Contact the development team"
    exit 1
}

# Set up error handling
trap error_handler ERR

# Check if running in non-interactive mode
if [ $# -gt 0 ]; then
    case "$1" in
        "list")
            list_backups
            ;;
        "quick")
            quick_rollback
            ;;
        *)
            echo -e "${RED}‚ùå Unknown command: $1${NC}"
            echo "Available commands: list, quick"
            exit 1
            ;;
    esac
else
    main
fi